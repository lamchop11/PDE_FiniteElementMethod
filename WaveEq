# Input: space interval [xl,xr], time interval [t0,tF],
#        number of space steps M, number of time steps N,
#        functions for initial and L & R boundary conditions
# Output: solution w

'''
u_tt = c^2*u_xx
u(x, 0) = f(x)
u_t(x, 0) = g(x)
u(a, t) = L(t)
u(b, t) = R(t)
'''


'''
u_tt = 4u_xx (c = 2)
u(x, 0) = 3 cos (pi * x)
u_t(x, 0) = 0
L(t) = R(t) = 0

Bounds:
0 <= x <= 2pi
0 <= t <= 2pi

'''

import numpy as np
from mpl_toolkits.mplot3d import axes3d, Axes3D
import matplotlib.pyplot as plt

def wave(xl,xr,t0,tF,M,N,f,g,l,r):

    c = 1						# wave coefficient

    h = float(xr-xl)/M; k=float(tF-t0)/N; m=M-1; n=N

    sigma = c*(k*k)/(h*h)

    a  = np.diag(2-2*(sigma**2)*np.ones(m)) + np.diag((sigma**2)*np.ones(m-1),1)
    a  +=np.diag((sigma**2)*np.ones(m-1),-1)	# define matrix a

    x = np.linspace(xl,xr,M+1)
    t = np.linspace(t0,tF,N+1)

    lside = l(t); rside = r(t)		# boundary conditions

    w = np.zeros((m,N+1))   			# 2nd index is time index

    w[:,0] = f(x[1:-1])				# initial conditions
    w[:,1] = 0.5 * np.dot(a, w[:, 0]) + k + g(x[1:-1]) + 0.5 * sigma * np.array([lside[0], *np.zeros(m-2), rside[0]])

    for j in range(2, n-1): #estimating output at forward mesh points
        w[:,j+1] = np.dot(a,w[:,j]) - w[:, j-1] + sigma*np.hstack((lside[j-1],np.zeros(m-2),rside[j-1]))

    w = np.vstack((lside,w,rside))

    [X,T] = np.meshgrid(x,t)			# build the 3-D plot of solution w
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.plot_wireframe(X, T, w.T)
    ax.view_init(30, -35)
    ax.set_xlabel('x'); ax.set_ylabel('t'); ax.set_zlabel('w')
    plt.show()

    return "This is w:\n{} ".format(w)

def f(x):  #initial profile function
    return 1

def g(x):  #initial derivative profile
    return x

def l(t): #left boundary
    return 0*t

def r(t): #right boundary
    return 0*t

print(wave(0,np.pi,0,np.pi,5,5, f, g, l, r))
